#!/usr/bin/env bash

# Function to install necessary packages based on OS type
install_packages() {
  # Define package groups
  BASE_PACKAGES=(coreutils make ssh-import-id zsh zsh-autosuggestions zsh-syntax-highlighting)
  PYTHON_PACKAGES=(python3-dev python3-pip python3-setuptools)
  HEADER_PACKAGES=(linux-headers-generic)

  # Combine all package lists
  PACKAGES=("${BASE_PACKAGES[@]}" "${HEADER_PACKAGES[@]}" "${PYTHON_PACKAGES[@]}")

  # Default values for command execution
  POST_COMMAND=""
  COMMAND=""
  OS=$(uname -s | tr A-Z a-z) # Default OS assumption

  # Determine if sudo is needed
  SUDO=""
  if [[ "$EUID" -ne 0 ]]; then
    SUDO=sudo
  fi

  # Check if running on Proxmox
  if command -v systemctl >/dev/null 2>&1; then
    if systemctl status pve-cluster 2>&1 | grep -q "running"; then
      OS="proxmox"
      HEADER_PACKAGES=(pve-headers proxmox-default-headers)
    fi
  fi

  # Detect OS and set package manager command
  if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    case $ID in
      debian|ubuntu|mint)
        PACKAGES+=(tldr)
        # Use --no-install-recommends and disable suggests to avoid extra packages
        COMMAND="apt-get install -y --no-install-recommends -o APT::Install-Suggests=false"
        $SUDO apt-get update
        ;;
      alpine)
        PACKAGES=("${BASE_PACKAGES[@]}" apk-tools-zsh-completion linux-headers shadow py3-pip py3-setuptools coreutils zsh-vcs)
        COMMAND="apk add --update"
        POST_COMMAND="$SUDO tee /etc/pam.d/chsh <<< 'auth        sufficient  pam_rootok.so'"
        ;;
      fedora|rhel|centos)
        COMMAND="yum install -y"
        ;;
      *)
        echo "❌ Unsupported Linux distribution, exiting."
        exit 1
        ;;
    esac
  elif [[ "$OS" == "proxmox" ]]; then
    # Proxmox should use sudo for update and avoid installing recommended/suggested packages
    COMMAND="apt-get install -y --no-install-recommends -o APT::Install-Suggests=false"
    $SUDO apt-get update
  else
    echo "❌ Unsupported OS, exiting."
    exit 1
  fi

  # Install packages one by one with error handling
  echo "📦 Installing system packages..."
  for package in "${PACKAGES[@]}"; do
    echo "📦 Installing: $package"
    if ! $SUDO $COMMAND "$package"; then
      echo "❌ Failed to install: $package" >&2
    fi
  done

  # Execute post-install command if needed
  if [[ -n "$POST_COMMAND" ]]; then
    eval "$POST_COMMAND"
  fi

  # Change user shell to zsh
  echo "🔄 Setting $(whoami) shell to $(which zsh)"
  $SUDO chsh -s $(which zsh) $(whoami)
}

# Check if running on NixOS and exit if true
if [[ -f /etc/NIXOS ]]; then
    echo "NixOS found, nothing to be done!"
    exit 0
fi

# Run package installation function
install_packages

# Import SSH keys from GitHub if ssh-import-id is available
if command -v ssh-import-id >/dev/null 2>&1; then
    echo "🔄 Importing .ssh/authorized_keys from github for user ilude..."
    ssh-import-id gh:ilude
else
    echo "⚠️ Warning: ssh-import-id not found, skipping SSH key import." >&2
fi

source ~/.dotfiles/zsh-plugins

echo "✅ Setup completed successfully!"
